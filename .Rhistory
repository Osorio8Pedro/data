library(httr)
library(aws.s3)
setwd("/Users/riukd/Desktop/klittle314-IHI_Covid_Public-a1f5281")
source('functions.R')
setwd("/Users/riukd/Desktop/klittle314-IHI_Covid_Public-a1f5281")
source('functions.R')
#data_file_country <- paste0('data/country_data_', as.character("2020-04-05"), '.csv')
#data_file_state   <- paste0('data/us_state_data_', as.character("2020-04-05"), '.csv')
defStartdate <- NA
defBuffer <- 7
#defBaseline is the default value of points to use to compute the exponential growth control limits
defBaseline <- 20
ftregion<-read.csv("newftregion.txt",sep=";",header=T)
ftregion=newftregion[which(newftregion$fch_confirmado>"2021-01-01"),]
ftregion=ftregion[which(ftregion$fch_confirmado>"2021-01-01"),]
b=ftregion$txt_nombreregion
c=ftregion$cant_casosconfirmadosdiario
d=ftregion$fch_confirmado
v=ftregion$cant_casosconfirmados
i=ftregion$id_region
df_state=data.frame("date"=d,"state"=b,"fips"=i,"cases"=c,"deaths"=v)
df_state$datex <- as.Date(df_state$date)
df_state$datex <- as.Date(df_state$date)
df_state <- df_state[order(df_state$state, df_state$datex), ]
df_state$New_Deaths     <- ave(df_state$deaths, df_state$state, FUN = function(x) { c(x[1], diff(x)) })
df_state$New_Deaths_max <- ave(df_state$New_Deaths, df_state$state, FUN = max)
df_state$level          <- 'state'
View(df_state)
df_state <- df_state[c('level', 'state', 'datex', 'New_Deaths', 'New_Deaths_max')]
date_max_state <- max(df_state$datex, na.rm = TRUE)
df_all <- rbind(df_country, df_state)
df_all <- rbind( df_state)
plot(df_all$datex, df_all$New_Deaths, type='l')
# find phase dates for both raw and adjusted data
df_all_raw <- by(
data = df_all,
INDICES = df_all[c('level', 'state')],
FUN = find_phase_dates,
adjust = FALSE)
df_all_raw <- do.call(dplyr::bind_rows, df_all_raw)
df_all_raw$type <- 'raw'
df_all_adjusted <- by(
data = df_all,
INDICES = df_all[c('level', 'state')],
FUN = find_phase_dates,
adjust = TRUE)
df_all_adjusted <- do.call(dplyr::bind_rows, df_all_adjusted)
df_all_adjusted$type <- 'adjusted'
df_all <- do.call(dplyr::bind_rows, list(df_all_raw, df_all_adjusted))
if (interactive()) {
df_all_plot <- do.call(dplyr::bind_rows, list(df_all_raw, df_all_adjusted))
#df_all_plot <- df_all_adjusted
df_all_plot$lcl <- as.numeric(df_all_plot$lcl)
df_all_plot$New_Deaths_Dump <- as.numeric(df_all_plot$New_Deaths_Dump)
library(ggplot2)
for (type in sort(unique(df_all_plot$type))) {
df_type <- df_all_plot[df_all_plot$type == type, ]
for (level in sort(unique(df_type$level))) {
pdf(sprintf('samples/%s-%s.pdf', type, level), width = 11, height = 8.5)
df_level <- df_type[df_type$level == level, ]
for (state in sort(unique(df_level$state))) {
df_state <- df_level[df_level$state == state, ]
g <- ggplot(
data = df_state,
aes(
x = datex,
y = New_Deaths)) +
geom_point() +
geom_line() +
geom_line(
aes(
y = midline),
color = 'red') +
geom_line(
aes(
y = ucl),
color = 'blue',
linetype = 'dashed') +
geom_line(
aes(
y = lcl),
color = 'blue',
linetype = 'dashed') +
geom_point(
aes(
y = New_Deaths_Dump),
color = 'red') +
scale_y_continuous(
limits = c(0, max(20, 2 * max(df_state$New_Deaths, na.rm = TRUE), max(df_state$New_Deaths_Dump, na.rm = TRUE)))) +
labs(
x = df_state$state[1],
y = paste(df_state$type[1], 'deaths'))
print(g)
}
dev.off(which = dev.cur())
}
}
}
if (interactive()) {
df_all_plot <- do.call(dplyr::bind_rows, list(df_all_raw, df_all_adjusted))
#df_all_plot <- df_all_adjusted
df_all_plot$lcl <- as.numeric(df_all_plot$lcl)
df_all_plot$New_Deaths_Dump <- as.numeric(df_all_plot$New_Deaths_Dump)
library(ggplot2)
for (type in sort(unique(df_all_plot$type))) {
df_type <- df_all_plot[df_all_plot$type == type, ]
for (level in sort(unique(df_type$level))) {
pdf(sprintf('samples/%s-%s.pdf', type, level), width = 11, height = 8.5)
df_level <- df_type[df_type$level == level, ]
for (state in sort(unique(df_level$state))) {
df_state <- df_level[df_level$state == state, ]
g <- ggplot(
data = df_state,
aes(
x = datex,
y = New_Deaths)) +
geom_point() +
geom_line() +
geom_line(
aes(
y = midline),
color = 'red') +
geom_line(
aes(
y = ucl),
color = 'blue',
linetype = 'dashed') +
geom_line(
aes(
y = lcl),
color = 'blue',
linetype = 'dashed') +
geom_point(
aes(
y = New_Deaths_Dump),
color = 'red') +
scale_y_continuous(
limits = c(0, max(20, 2 * max(df_state$New_Deaths, na.rm = TRUE), max(df_state$New_Deaths_Dump, na.rm = TRUE)))) +
labs(
x = df_state$state[1],
y = paste(df_state$type[1], 'deaths'))
print(g)
}
dev.off(which = dev.cur())
}
}
}
View(df_state)
knitr::opts_chunk$set(class.source = "watch-out",collapse = TRUE,
#comment = "#>",
fig.align = "center",
#fig.path = "man/figures/README-",
echo = TRUE,
fig.width = 8,
fig.height = 6)
require(ggplot2)
require(gridExtra)
require(RColorBrewer)
library(incidence2)
library(trendbreaker) # for ASMODEE
library(dplyr)        # for data manipulation
library(future)
library(httr)
library(aws.s3)
source('functions.R')
defStartdate <- NA
defBuffer <- 7
#defBaseline is the default value of points to use to compute the exponential growth control limits
defBaseline <- 20
######Regiones
dfff=df_all[which(df_all$datex>"2021-11-22"),]
dfff=dfff[which(dfff$datex<"2021-11-24"),]
ftregion<-read.csv("newftregion.txt",sep=";",header=T)
ftregion=ftregion[which(ftregion$fch_confirmado>"2021-01-01"),]
b=ftregion$txt_nombreregion
c=ftregion$cant_casosconfirmadosdiario
#c=ftregion$cant_fallecidos
#v=ftregion$cant_
p=ftregion$cant_poblacion
c=round((c/p*100000),1)
d=ftregion$fch_confirmado
v=ftregion$cant_casosconfirmados
i=ftregion$id_region
df_state=data.frame("date"=d,"state"=b,"fips"=i,"cases"=c,"deaths"=v)
df_state$datex <- as.Date(df_state$date)
df_state <- df_state[order(df_state$state, df_state$datex), ]
df_state$New_Deaths     <- ave(df_state$deaths, df_state$state, FUN = function(x) { c(x[1], diff(x)) })
df_state$New_Deaths_max <- ave(df_state$New_Deaths, df_state$state, FUN = max)
df_state$level          <- 'state'
df_state <- df_state[c('level', 'state', 'datex', 'New_Deaths', 'New_Deaths_max')]
date_max_state <- max(df_state$datex, na.rm = TRUE)
#df_all <- rbind(df_country, df_state)
df_all <- rbind( df_state)
plot(df_all$datex, df_all$New_Deaths, type='l')
# find phase dates for both raw and adjusted data
df_all_raw <- by(
data = df_all,
INDICES = df_all[c('level', 'state')],
FUN = find_phase_dates,
adjust = FALSE)
df_all_raw <- do.call(dplyr::bind_rows, df_all_raw)
df_all_raw$type <- 'raw'
df_all_adjusted <- by(
data = df_all,
INDICES = df_all[c('level', 'state')],
FUN = find_phase_dates,
adjust = TRUE)
df_all_adjusted <- do.call(dplyr::bind_rows, df_all_adjusted)
df_all_adjusted$type <- 'adjusted'
df_all <- do.call(dplyr::bind_rows, list(df_all_raw, df_all_adjusted))
if (interactive()) {
df_all_plot <- do.call(dplyr::bind_rows, list(df_all_raw, df_all_adjusted))
#df_all_plot <- df_all_adjusted
df_all_plot$lcl <- as.numeric(df_all_plot$lcl)
df_all_plot$New_Deaths_Dump <- as.numeric(df_all_plot$New_Deaths_Dump)
library(ggplot2)
for (type in sort(unique(df_all_plot$type))) {
df_type <- df_all_plot[df_all_plot$type == type, ]
for (level in sort(unique(df_type$level))) {
pdf(sprintf('samples/%s-%s.pdf', type, level), width = 11, height = 8.5)
df_level <- df_type[df_type$level == level, ]
for (state in sort(unique(df_level$state))) {
df_state <- df_level[df_level$state == state, ]
g <- ggplot(
data = df_state,
aes(
x = datex,
y = New_Deaths)) +
geom_point() +
geom_line() +
geom_line(
aes(
y = midline),
color = 'red') +
geom_line(
aes(
y = ucl),
color = 'blue',
linetype = 'dashed') +
geom_line(
aes(
y = lcl),
color = 'blue',
linetype = 'dashed') +
geom_point(
aes(
y = New_Deaths_Dump),
color = 'red') +
scale_y_continuous(
limits = c(0, max(20, 2 * max(df_state$New_Deaths, na.rm = TRUE), max(df_state$New_Deaths_Dump, na.rm = TRUE)))) +
labs(
x = df_state$state[1],
y = paste(df_state$type[1], 'deaths'))
print(g)
}
dev.off(which = dev.cur())
}
}
}
knitr::opts_chunk$set(class.source = "watch-out",collapse = TRUE,
#comment = "#>",
fig.align = "center",
#fig.path = "man/figures/README-",
echo = TRUE,
fig.width = 8,
fig.height = 6)
require(ggplot2)
require(gridExtra)
require(RColorBrewer)
library(incidence2)
library(trendbreaker) # for ASMODEE
library(dplyr)        # for data manipulation
library(future)
pos=as.numeric(format(Sys.Date(), "%m"))
meses=c("Enero","Febrero","Marzo","Abril","Mayo","Junio","Julio","Agosto","Septiembre","Octubre","Noviembre","Diciembre")
fecha0=paste(format(Sys.Date()-6, "%d"),"de",meses[pos],sep=" ")
fecha1=paste(format(Sys.Date(), "%d"),"de",meses[pos],sep=" ")
cat(paste("En este informe presentamos el Analisis Semanal Nº51 de Covid-19 elaborado por el Grupo Epidemiológico Matemático para la Vigilancia de Epidemias y Pandemia (GEMVEP) de la Universidad de Santiago. Los datos usados en este informe consideran los casos de Covid-19 informados entre el",fecha0,"y el",fecha1,".Los datos provienen de las siguientes fuentes de información:"))
setwd("/Users/riukd/Documents/Gemvep/Febrero/Ejemplo2")
ftregion<-read.csv("ftregion.txt",sep=";",header=T)
ftregion0=ftregion[which(ftregion$fch_confirmado>="2020-03-03" & ftregion$id_region==0),]
valor=ftregion0$cant_casosconfirmadosdiario
media=rep(NA,length(valor))
for(i in 7:length(media))
{
media[i]=mean(valor[(i-6):i])
}
fechamax=ftregion0$fch_confirmado[which(media>media[length(media)])]
fechamax=fechamax[length(fechamax)]
pos=as.numeric(format(as.Date(fechamax), "%m"))
meses=c("Enero","Febrero","Marzo","Abril","Mayo","Junio","Julio","Agosto","Septiembre","Octubre","Noviembre","Diciembre")
fechamax0=paste(format(as.Date(fechamax), "%d"),"de",meses[pos],sep=" ")
fecha=names(table(ftregion$fch_confirmado))
l1=length(fecha)
Total<-read.csv("TotalesporRegion.txt",sep=",",header=T)
antigeno<-Total[which(Total[,2]=="Casos nuevos confirmados por antigeno"),]
antigeno2<-antigeno[,(dim(antigeno)[2]-6):(dim(antigeno)[2])]
antigeno3<-apply(antigeno2,1,sum)
pos=c(2:6,8:9,11:12,14:16,7,13,1,10,17)
antigeno4<-antigeno3[pos[1:16]]
antigeno5<-c(sum(antigeno4),antigeno4)
#Positividad Ultima Semana
ftregion3=ftregion[which(ftregion$fch_confirmado >=fecha[l1-6]),]
tabla1=aggregate(cant_pcr~id_region,ftregion3,sum)
tabla3=aggregate(cant_poblacion~id_region,ftregion3,mean)
#tabla1[which(tabla1[,1]==0),2]=tabla1[which(tabla1[,1]==0),2]+25817
tabla2=aggregate(cant_casosconfirmadosdiario~id_region,ftregion3,sum)
#tabla2[which(tabla2[,1]==0),2]=tabla2[which(tabla2[,1]==0),2]+2457
posit=(tabla2[,2])/tabla1[,2]
posit[1:17]=(tabla2[1:17,2]-antigeno5)/tabla1[1:17,2]
inc=tabla2[,2]/tabla3[,2]*100000
incnac=round(inc[1]/7,2)
times=round(10/incnac,1)
bajo="bajo"
if(incnac>10)
{
times=round(incnac/10,1)
bajo="sobre"
}
tabla=cbind(tabla1,tabla2[,2],posit,inc)
pos=order(tabla[2:17,5],decreasing=T)
regiones=c("Tarapaca","Antofagasta","Atacama","Coquimbo","Valparaiso","Ohiggins","Maule","Bio-Bio","Araucania","Los Lagos","Aysen","Magallanes","Metropolitana","Los Rios","Arica","Nuble")
maxim=cbind(regiones[pos[1:7]],round(tabla[2:17,5][pos[1:7]],2))
pos2=order(tabla[2:17,3],decreasing=T)
#maxim=cbind(regiones[pos[1:5]],round(tabla[2:6,5][pos[1:5]],5))
minim=cbind(regiones[pos[14:16]],round(tabla[2:17,5] [pos[14:16]],5))
#Positividad Penultima Semana
antigeno2<-antigeno[,(dim(antigeno)[2]-13):(dim(antigeno)[2]-7)]
antigeno3<-apply(antigeno2,1,sum)
pos=c(2:6,8:9,11:12,14:16,7,13,1,10,17)
antigeno4<-antigeno3[pos[1:16]]
antigeno5<-c(sum(antigeno4),antigeno4)
ftregion3=ftregion[which(ftregion$fch_confirmado >=fecha[l1-13] & ftregion$fch_confirmado <=fecha[l1-7] ),]
tabla1=aggregate(cant_pcr~id_region,ftregion3,sum)
tabla2=aggregate(cant_casosconfirmadosdiario~id_region,ftregion3,sum)
posit=(tabla2[,2])/tabla1[,2]
posit[1:17]=(tabla2[1:17,2]-antigeno5)/tabla1[1:17,2]
tabla0=cbind(tabla1,tabla2[,2],posit)
var=round(((tabla[,3]/tabla0[,3])-1)*100,2)
pos=order(var[2:17],decreasing=T)
maxvar=cbind(regiones[pos[1:7]],var[2:17][pos[1:7]])
minvar=cbind(regiones[pos[14:16]],var[2:17][pos[14:16]])
var1=round(((tabla[1,3]/tabla0[1,3])-1)*100,2)
fechas=names(table(ftregion$fch_confirmado))
l1=length(fechas)
ftregion2=ftregion[which(ftregion$fch_confirmado==fechas[l1]),]
ftregion3=ftregion[which(ftregion$fch_confirmado==fechas[l1-7]),]
b=ftregion2$txt_nombreregion
f=ftregion2$porc_roefectivo
f1=ftregion3$porc_roefectivo
texto1="una disminucion"
if(var1>0)
texto1="un aumento"
cat(paste("En la ultima semana se han confirmado",tabla[1,3],"casos de Covid-19 en Chile. Una tasa de incidencia de",incnac,"cada 100.000 habitantes.Este es la mayor incidencia semanal en Chile desde el",fechamax0,".Esto es ",texto1,"de un",var1,"%","de los casos respecto de la semana anterior. El aumento más leve de los casos en esta semana se debe a que debido a los feriados del 31 de Octubre y 1 de Noviembre se realizaron menos exámenes PCR durante esta semana. Nuestra estimación del R Efectivo a nivel nacional es de",round(f[1],2),". La incidencia actual esta",times,"veces",bajo,"un nivel crítico de contagios.  Además, en último informe epidemiológico se informaron 13.087 casos activos (confirmados y probables) de Covid-19 en la última semana en el pais (tasa de 71,0 casos c/100.000h). Nosotros estimamos 25.117 casos activos (129,1 casos c/100.000h). En consecuencia, estimamos un subreporte de casos activos de un 45.0%\n  \newpage",sep=" "))
cat(paste("Las regiones con las mayores tasas de incidencia promedio en la ultima semana son:  \n  \n",maxim[1,1],round(as.numeric(maxim[1,2])/7,2)," casos cada 100.000 habitantes   \n",maxim[2,1],round(as.numeric(maxim[2,2])/7,2),"  \n",maxim[3,1],round(as.numeric(maxim[3,2])/7,2),"  \n",maxim[4,1],round(as.numeric(maxim[4,2])/7,2),"  \n",maxim[5,1],round(as.numeric(maxim[5,2])/7,2)," \n",maxim[6,1],round(as.numeric(maxim[6,2])/7,2)," \n",maxim[7,1],round(as.numeric(maxim[7,2])/7,2)," \n  \n",sep=" "))
cat(paste("Las regiones con las menores tasas de incidencia promedio en la ultima semana son:  \n  \n",minim[1,1],round(as.numeric(minim[1,2])/7,2),"casos cada 100.000 habitantes  \n",minim[2,1],round(as.numeric(minim[2,2])/7,2),"  \n",minim[3,1],round(as.numeric(minim[3,2])/7,2),"  \n  \n",sep=" "))
Nf=length(which(as.numeric(tabla[2:17,5])>70))
cat(paste("Actualmente,",Nf,"de 16 regiones del país tienen un nivel crítico de contagios.  \n  \n"),sep=" ")
Nact=length(which(var[2:17]>0))
cat(paste("Además,",Nact,"de 16 regiones del país han aumentado casos de Covid-19 en los últimos 7 días.","Las regiones con los mayores aumentos de casos de Covid-19 en la ultima semana son:  \n  \n",maxvar[1,1],"+",maxvar[1,2],"%    \n",maxvar[2,1],"+",maxvar[2,2],"%    \n",maxvar[3,1],"+",maxvar[3,2],"%    \n",maxvar[4,1],"+",maxvar[4,2],"%    \n",maxvar[5,1],"+",maxvar[5,2],"%    \n",sep=" "))
cat(paste("Mientras que las regiones con las mayores disminuciones de casos de Covid-19 en la ultima semana son:  \n  \n",minvar[1,1],minvar[1,2],"%    \n",minvar[2,1],minvar[2,2],"%    \n",minvar[3,1],minvar[3,2],"%    \n",sep=" "))
cat("  \n En la siguiente figura mostramos nuestro balance de indicadores de circulación del Covid-19 por región del país en la ultima semana.     \n")
e=ftregion2$num_cluster
e1=rep(0,length(e))
e[16]=1 #Arica
e[2]=2 #Tarapaca
e[3]=2 #Antofa
e[4]=3 #Atacama
e[5]=3 #Coquimbo
e[6]=3  #Valpo
e[14]=2  #Metro
e[7]=1   #Ohiggins
e[8]=2  #Maule
e[17]=3 #uble
e[9]=3  #BIOBIO
e[10]=2  #Araucana
e[15]=3  #Losrios
e[11]=3  #LosLagos
e[12]=3 #Aysen
e[13]=1  #Magallanes
e1[which(e==1)]="Riesgo Bajo"
e1[which(e==2)]="Riesgo Medio"
e1[which(e==3)]="Riesgo Alto"
e1[is.na(e)]=NA
diff2=round(f/f1*100-100,2)
varpos=round(((tabla[,4]/tabla0[,4])-1)*100,2)
nombres=c("Tarapaca","Antofagasta","Atacama","Coquimbo","Valparaiso","Ohiggins","Maule","Bio-Bio","Araucania","Los Lagos","Aysen","Magallanes","Metropolitana","Los Rios","Arica","Nuble")
df=data.frame("Region"=b,"Tasa de Positividad"=paste(round(tabla[,4]*100,1),"% (",round(varpos,1),"%)",sep=""),"R Efectivo"=paste(round(f,2)," (",round(diff2,2),"%)",sep=""),"Tasa Incidencia"=paste(round(tabla[,5]/7,2)," (",round(var,2),"%)",sep=""), "Cluster"=e1)
e2=e[2:17]
df=df[2:17,]
df[,1]=nombres
df=df[c(15,1:5,13,6:7,16,8:9,14,10:12),]
df2=df
alerta=df[which(df[,5]=="Riesgo Alto"),1]
maxpos=which.max(tabla[,4])
maxr=which.max(f)
texto=paste("  \n Damos alerta en la region de",alerta,sep=" ")
if(length(alerta)>1)
{
texto="  \n
\n
\n Damos alerta en las regiones de "
for(i in 1:length(alerta))
{
if(i < length(alerta) | i==1)
texto=paste(texto,alerta[i],", ",sep="")
if(i == length(alerta) & i>1)
texto=paste(texto,"y",alerta[i],sep=" ")
}
}
#df2[,2]=paste(df2[,2],"%")
e2=e2[c(15,1:5,13,6:7,16,8:9,14,10:12)]
colores=c("green","yellow","red")
tt=ttheme_default(base_size = 8, base_colour = "black")
fontmatrix=matrix(1, ncol=ncol(df),nrow=nrow(df),byrow=TRUE)
fontmatrix[which(e2==3),]=2
colormatrix=matrix("green", ncol=ncol(df),nrow=nrow(df),byrow=TRUE)
colormatrix[which(e2==3),]="red"
colormatrix[which(e2==2),]="yellow"
tt$core$fg_params <- list(fontface=fontmatrix)
tt$core$bg_params <- list(fill=colormatrix,alpha=0.7)
tt$colhead$fg_params <- list(fontface=rep(2,5))
tt$colhead$bg_params <- list(fill="white")
grid.table(format(df2, decimal.mark = ",", big.mark = ".",decimals=2),rows =NULL,theme=tt)
cat(paste(texto,".Además, la región de" ,regiones[tabla[maxpos,1]],"tiene la mayor tasa de Positividad con (",round(tabla[maxpos,4]*100,1),"%) y la region de ",regiones[tabla[maxr,1]],"tiene el mayor R efectivo con (",round(f[maxr],1),")
\n",sep=" "))
ftnacional<-read.csv("ftnacional.txt",sep=";",header=T)
library(httr)
library(aws.s3)
source('functions.R')
defStartdate <- NA
defBuffer <- 7
#defBaseline is the default value of points to use to compute the exponential growth control limits
defBaseline <- 20
######Regiones
dfff=df_all[which(df_all$datex>"2021-11-22"),]
dfff=dfff[which(dfff$datex<"2021-11-24"),]
ftregion<-read.csv("newftregion.txt",sep=";",header=T)
ftregion<-read.csv("newftregion.txt",sep=";",header=T)
ftregion=ftregion[which(ftregion$fch_confirmado>"2021-01-01"),]
b=ftregion$txt_nombreregion
c=ftregion$cant_casosconfirmadosdiario
d=ftregion$fch_confirmado
v=ftregion$cant_casosconfirmados
i=ftregion$id_region
df_state=data.frame("date"=d,"state"=b,"fips"=i,"cases"=c,"deaths"=v)
df_state$datex <- as.Date(df_state$date)
df_state <- df_state[order(df_state$state, df_state$datex), ]
df_state$New_Deaths     <- ave(df_state$deaths, df_state$state, FUN = function(x) { c(x[1], diff(x)) })
df_state$New_Deaths_max <- ave(df_state$New_Deaths, df_state$state, FUN = max)
df_state$level          <- 'state'
df_state <- df_state[c('level', 'state', 'datex', 'New_Deaths', 'New_Deaths_max')]
date_max_state <- max(df_state$datex, na.rm = TRUE)
#df_all <- rbind(df_country, df_state)
df_all <- rbind( df_state)
plot(df_all$datex, df_all$New_Deaths, type='l')
